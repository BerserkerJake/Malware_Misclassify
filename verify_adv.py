import os
import numpy as np
import json
import pickle
import mp4_model as models
from scipy.sparse import csr_matrix


input_file_folder = f'data'
X_file_name = f'{input_file_folder}/apg-X.json'
y_file_name = f'{input_file_folder}/apg-y.json'
meta_file_name = f'{input_file_folder}/apg-meta.json'

A_file_name = f'49875A9C25EB18945A8E7F27C8188834CFF48070413604D477763EC7A20E9C4A.json'
B_file_name = f'5E06B7510B55B52C94D2AB0D7BB94AAA454860C6F8729BA2842438D92CDB8EEE.json'


class Verifier:
    def __init__(self, jsonFile):
        self.jsonFile = jsonFile
        self.features = [0] * 5000

    def getFeatureArray(self, featureList, addedFeatureList):
        svm_model = models.SVM(X_file_name, y_file_name, meta_file_name, num_features=5000)
        svm_model.generate()

        # generate all the feature names used by current mode 
        # 5000 features
        feature_name_list = [svm_model.vec.feature_names_[i] for i in svm_model.column_idxs]
    
        # generate the list of 49875A
        with open(A_file_name, 'rt') as f:
            fourA_feature = json.load(f)
    
        fourA_feature_list = []
        for i in feature_name_list:
            if i in fourA_feature.keys():
                fourA_feature_list.append(1)
            else:
                fourA_feature_list.append(0)
    
        # generate the list of 5E06B
        with open(B_file_name, 'rt') as f:
            fiveB_feature = json.load(f)

        fiveB_feature_list = []
        for i in feature_name_list:
            if i in fiveB_feature.keys():
                fiveB_feature_list.append(1)
            else:
                fiveB_feature_list.append(0)
    
        arr1 = np.array([fourA_feature_list])
        arr1 = arr1.reshape(-1, 1).T
        arr2 = np.array([fiveB_feature_list])
        arr2 = arr2.reshape(-1, 1).T
        arr = np.vstack([arr1, arr2])
        apk_test = csr_matrix(arr)

        y_pred = svm_model.clf.predict(apk_test)
        y_pred = y_pred.tolist()
        print({"5E06B7": y_pred[0], "49875A": y_pred[1]})
        #  print("Before create the adversarial samples ", y_pred) #[1 0]

    
        # use SVM to make an explation on the feature weights

        # features leading to malicious judugment
        pos_fList = []
        if svm_model.feature_index_positive is not None:
            # first 300 contributors to more effective malicious judgements
            pos_fList = [i for i in svm_model.feature_index_positive if feature_name_list[i].startswith('app_permission') or feature_name_list[i].startswith('api_perssion')]
            # boil down to the top 30 when the size is too big
            if len(pos_fList) > 35:
                pos_fList = cpos_fList[:35]

        # features contributes more to benign judgement
        neg_fList = []  
        if svm_model.feature_index_negative is not None:
            # first 300 contributors to more effective benign judgements
            neg_fList = [i for i in svm_model.feature_index_negative if feature_name_list[i].startswith('app_permission') or feature_name_list[i].startswith('api_perssion')]
            # boil down to the top 30 when the size is too big
            if len(neg_fList) > 30:
                neg_fList = neg_fList[:30]


        with open("added-features-49875A.txt", "w") as f:
            for index in neg_fList:
                if fourA_feature_list[index] == 0:
                    fourA_feature_list[index] = 1
                    f.write(feature_name_list[index] + "\n")
    

        with open("added-features-5E06B7.txt", "w") as f:
            for index in pos_fList:
                if fiveB_feature_list[index] == 0:
                    fiveB_feature_list[index] = 1
                    f.write(feature_name_list[index] + "\n")
    
        arr1 = np.array([fourA_feature_list])
        arr1 = arr1.reshape(-1, 1).T
        arr2 = np.array([fiveB_feature_list])
        arr2 = arr2.reshape(-1, 1).T
        arr = np.vstack([arr1, arr2])
        apk_test = csr_matrix(arr)

        y_pred = svm_model.clf.predict(apk_test)
        print({"5E06B7": y_pred[0], "49875A": y_pred[1]})
        # print("After create the adversarial samples ", y_pred) #[0 1] 
        

if __name__ == "__main__":
    verifier_5E06B7 = Verifier(
        "./5E06B7510B55B52C94D2AB0D7BB94AAA454860C6F8729BA2842438D92CDB8EEE.json"
    )
    verifier_49875A = Verifier(
        "./49875A9C25EB18945A8E7F27C8188834CFF48070413604D477763EC7A20E9C4A.json"
    )
    input_file_folder = f"data"
    # featureList is the output file with the 5000 in the name
    # aFList_# is the additional features added to the json file of the outputs
    fList = f"{input_file_folder}/all_feature_names_5000.json"
    aFList_5E06B7 = f"{input_file_folder}/added-features-5E06B7.txt"
    aFList_49875A = f"{input_file_folder}/added-features-49875A.txt"

    # Merge the feature array with the added features
    verifier_5E06B7.getFeatureArray(fList, aFList_5E06B7)
    verifier_49875A.getFeatureArray(fList, aFList_49875A)
    # Load trained SVM model with 5000 features

    # Make predictions

    # Output predicted label and original label for each sample
    # Object needed to be printed out -  res = {"5E06B7": <value>, "49875A": <value>}
    # The predicted value can be 0 or 1. 
    # Expected output
    # {"5E06B7": 1, "49875A": 0}


# Please put your thought as code comments below why these features might be helpful to make an adversarial sample.

#### My thoughts ####
 # In pos_fList, the features' weights are close to 1, which means that the features are 
 # more likely to be used by malicious apks (more likely to be classified as benign judgement)
 # By adding these features, 5E06B apk will be more likely to be judged as malicious and thus deceive the classifier to be recognized as malwares.

# In neg_fList, the features' weights are close to -1, which means that the features are 
# more likely to be used by benign apks (more likely to be classified as benign judgement).
# By adding these features, 49875A apk will be more likely to be judged as bengin and thus deceive the classifier to be recognized as goodwares.

